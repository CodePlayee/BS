{"queryPath":"/src/noisyEdge.js","absPath":"/Users/gaozhen/Documents/BS/src/noisyEdge.js","realPath":"/src/noisyEdge.js","type":"script","source":"//this lib refers to this blogs:\n//https://www.redblobgames.com/maps/noisy-edges/\n//and it's used to make iregular curve lines that represent rivers, coastlines and so on.\n//authored by GaoZhen at 2019/11/28\n\n// class Point {\n//     constructor(x = 0, y = 0, color = \"gray\") {\n//         this.x = x;\n//         this.y = y;\n//         this.color = color;\n//     }\n// }\n\n//     Point.prototype.clone = function() {\n//     return new Point(this.x, this.y, this.color);\n// };\n\nconst mix = function (a, b, t) {\n\treturn a * (1.0 - t) + b * t;\n};\n\n/**\n * Componentwise mix for arrays of equal length; \n */\nconst mixp = function (p, q, t) {\n\tconst pt = [0, 0]\n\tpt[0] = mix(p[0], q[0], t);\n\tpt[1] = mix(p[1], q[1], t);\n\treturn pt;\n};\n\n/**\n * Return the noisy line from a to b, within quadrilateral a-p-b-q,\n * as an array of points, not including a. The recursive subdivision\n * has up to 2^levels segments. Segments below a given length are\n * not subdivided further.\n */\nconst divisor = 0x10000000;\n\n//minLen:the min distance between two points in the noisy line\n//amplitude:the degree of fluctuation of the noisy line(0-1)\nfunction recursiveSubdivision(minLen, amplitude, randInt) {\n\tfunction recur(a, b, p, q) {\n\t\tconst dx = a[0] - b[0],\n\t\t\tdy = a[1] - b[1];\n\t\tif (dx * dx + dy * dy < minLen * minLen) {\n\t\t\treturn [b];\n\t\t}\n\n\t\tconst ap = mixp(a, p, 0.5),\n\t\t\tbp = mixp(b, p, 0.5),\n\t\t\taq = mixp(a, q, 0.5),\n\t\t\tbq = mixp(b, q, 0.5);\n\n\t\tconst division =\n\t\t\t0.5 * (1 - amplitude) + (randInt(divisor) / divisor) * amplitude;\n\n\t\tconst center = mixp(p, q, division);\n\n\t\tconst results1 = recur(a, center, ap, aq),\n\t\t\tresults2 = recur(center, b, bp, bq);\n\n\t\treturn results1.concat(results2);\n\t}\n\treturn recur;\n}\n\nmodule.exports = { recursiveSubdivision };\n","code":"\"use strict\";\n\nvar mix = function mix(a, b, t) {\n\treturn a * (1.0 - t) + b * t;\n};\n\nvar mixp = function mixp(p, q, t) {\n\tvar pt = [0, 0];\n\tpt[0] = mix(p[0], q[0], t);\n\tpt[1] = mix(p[1], q[1], t);\n\treturn pt;\n};\n\nvar divisor = 0x10000000;\n\nfunction recursiveSubdivision(minLen, amplitude, randInt) {\n\tfunction recur(a, b, p, q) {\n\t\tvar dx = a[0] - b[0],\n\t\t    dy = a[1] - b[1];\n\t\tif (dx * dx + dy * dy < minLen * minLen) {\n\t\t\treturn [b];\n\t\t}\n\n\t\tvar ap = mixp(a, p, 0.5),\n\t\t    bp = mixp(b, p, 0.5),\n\t\t    aq = mixp(a, q, 0.5),\n\t\t    bq = mixp(b, q, 0.5);\n\n\t\tvar division = 0.5 * (1 - amplitude) + randInt(divisor) / divisor * amplitude;\n\n\t\tvar center = mixp(p, q, division);\n\n\t\tvar results1 = recur(a, center, ap, aq),\n\t\t    results2 = recur(center, b, bp, bq);\n\n\t\treturn results1.concat(results2);\n\t}\n\treturn recur;\n}\n\nmodule.exports = { recursiveSubdivision: recursiveSubdivision };","codeWraped":"Cube(\"/src/noisyEdge.js\", [], function (module, exports, require, load, process, global) {\n\n  var mix = function mix(a, b, t) {\n    return a * (1.0 - t) + b * t;\n  };\n\n  var mixp = function mixp(p, q, t) {\n    var pt = [0, 0];\n    pt[0] = mix(p[0], q[0], t);\n    pt[1] = mix(p[1], q[1], t);\n    return pt;\n  };\n\n  var divisor = 0x10000000;\n\n  function recursiveSubdivision(minLen, amplitude, randInt) {\n    function recur(a, b, p, q) {\n      var dx = a[0] - b[0],\n      dy = a[1] - b[1];\n      if (dx * dx + dy * dy < minLen * minLen) {\n        return [b];\n      }\n\n      var ap = mixp(a, p, 0.5),\n      bp = mixp(b, p, 0.5),\n      aq = mixp(a, q, 0.5),\n      bq = mixp(b, q, 0.5);\n\n      var division = 0.5 * (1 - amplitude) + randInt(divisor) / divisor * amplitude;\n\n      var center = mixp(p, q, division);\n\n      var results1 = recur(a, center, ap, aq),\n      results2 = recur(center, b, bp, bq);\n\n      return results1.concat(results2);\n    }\n    return recur;\n  }\n\n  module.exports = { recursiveSubdivision: recursiveSubdivision };return module.exports;});","sourceMap":null,"modifyTime":1582868055348,"mime":"application/javascript","wrap":true,"skip":false,"compress":false,"ext":".js","targetExt":".js","loads":[],"originalLoads":[],"requires":[],"requiresOrigin":[],"debugInfo":[],"requiresArgsRefer":[]}